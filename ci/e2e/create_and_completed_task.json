{
	"info": {
		"_postman_id": "a84b19ef-1de2-4883-bd2b-1cf15d607d98",
		"name": "Complete Task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sign In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HTTP Status",
							"pm.test(\"Request returns 201 HTTP Status\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// HTTP Headers",
							"pm.test(\"Content-Type header is set\", function() {",
							"    header = pm.response.headers.get(\"Content-Type\");",
							"    pm.expect(header).to.eql(\"application/json;charset=utf-8\");",
							"});",
							"",
							"pm.test(\"X-Content-Type-Options header is set\", function() {",
							"    header = pm.response.headers.get(\"X-Content-Type-Options\");",
							"    pm.expect(header).to.eql(\"nosniff\");",
							"});",
							"",
							"pm.test(\"X-Frame-Options header is set\", function() {",
							"    header = pm.response.headers.get(\"X-Frame-Options\");",
							"    pm.expect(header).to.eql(\"DENY\");",
							"});",
							"",
							"pm.test(\"X-XSS-Protection header is set\", function() {",
							"    header = pm.response.headers.get(\"X-XSS-Protection\");",
							"    pm.expect(header).to.eql(\"0\");",
							"});",
							"",
							"pm.test(\"Cache-Control header is set\", function() {",
							"    header = pm.response.headers.get(\"Cache-Control\");",
							"    pm.expect(header).to.eql(\"no-store\");",
							"});",
							"",
							"pm.test(\"Content-Security-Policy header is set\", function() {",
							"    header = pm.response.headers.get(\"Content-Security-Policy\");",
							"    pm.expect(header).to.eql(\"default-src 'none'; frame-ancestors 'none'; sandbox\");",
							"});",
							"",
							"pm.test(\"Server header is empty\", function() {",
							"    header = pm.response.headers.get(\"Server\");",
							"    pm.expect(header).to.eql(\"\");",
							"});",
							"",
							"// HTTP Body",
							"pm.test(\"Response body has token\", function() {",
							"    let credentials = pm.response.json()",
							"    pm.expect(credentials).to.have.property(\"token\")",
							"    pm.expect(credentials.token).to.not.eql(\"\")",
							"});",
							"",
							"// Store token",
							"let body = pm.response.json();",
							"pm.environment.set(\"session_token\", body.token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{USER_PASSWORD}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{USER_USERNAME}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{API_HOST}}/v1/sessions",
					"host": [
						"{{API_HOST}}"
					],
					"path": [
						"v1",
						"sessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HTTP Status\r",
							"pm.test(\"Request returns 201 HTTP Status\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// HTTP Headers\r",
							"pm.test(\"Content-Type header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(header).to.eql(\"application/json;charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-Content-Type-Options header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-Content-Type-Options\");\r",
							"    pm.expect(header).to.eql(\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-Frame-Options header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-Frame-Options\");\r",
							"    pm.expect(header).to.eql(\"DENY\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-XSS-Protection header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-XSS-Protection\");\r",
							"    pm.expect(header).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"pm.test(\"Cache-Control header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Cache-Control\");\r",
							"    pm.expect(header).to.eql(\"no-store\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Security-Policy header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Content-Security-Policy\");\r",
							"    pm.expect(header).to.eql(\"default-src 'none'; frame-ancestors 'none'; sandbox\");\r",
							"});\r",
							"\r",
							"pm.test(\"Server header is empty\", function() {\r",
							"    header = pm.response.headers.get(\"Server\");\r",
							"    pm.expect(header).to.eql(\"\");\r",
							"});\r",
							"\r",
							"pm.test(\"Location header is set to task resource\", function() {\r",
							"    header = pm.response.headers.get(\"Location\");\r",
							"    pm.expect(header.substr(0, 10)).to.eql(\"/v1/tasks/\");\r",
							"});\r",
							"\r",
							"// Extract Task ID from Location header and store\r",
							"location_header = pm.response.headers.get(\"Location\");\r",
							"task_id = location_header.replace(\"/v1/tasks/\", \"\");\r",
							"pm.environment.set(\"task_id\", task_id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{session_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"subject\": \"phone bill\",\n    \"description\": \"ask for extension\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_HOST}}/v1/tasks",
					"host": [
						"{{API_HOST}}"
					],
					"path": [
						"v1",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HTTP Status\r",
							"pm.test(\"Request returns 200 HTTP Status\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// HTTP Headers\r",
							"pm.test(\"Content-Type header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(header).to.eql(\"application/json;charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-Content-Type-Options header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-Content-Type-Options\");\r",
							"    pm.expect(header).to.eql(\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-Frame-Options header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-Frame-Options\");\r",
							"    pm.expect(header).to.eql(\"DENY\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-XSS-Protection header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-XSS-Protection\");\r",
							"    pm.expect(header).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"pm.test(\"Cache-Control header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Cache-Control\");\r",
							"    pm.expect(header).to.eql(\"no-store\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Security-Policy header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Content-Security-Policy\");\r",
							"    pm.expect(header).to.eql(\"default-src 'none'; frame-ancestors 'none'; sandbox\");\r",
							"});\r",
							"\r",
							"pm.test(\"Server header is empty\", function() {\r",
							"    header = pm.response.headers.get(\"Server\");\r",
							"    pm.expect(header).to.eql(\"\");\r",
							"});\r",
							"\r",
							"// HTTP Response Body\r",
							"pm.test(\"Task is uncompleted\", function() {\r",
							"    let task = pm.response.json();\r",
							"    task_id = pm.environment.get(\"task_id\");\r",
							"    pm.expect(task.id).to.eql(task_id);\r",
							"    pm.expect(task.subject).to.eql(\"phone bill\");\r",
							"    pm.expect(task.description).to.eql(\"ask for extension\");\r",
							"    pm.expect(task.completed).to.be.false;\r",
							"});\r",
							"\r",
							"// Store task data\r",
							"let task = pm.response.json();\r",
							"delete task.id;\r",
							"let task_data = JSON.stringify(task);\r",
							"pm.environment.set(\"task_data\", task_data);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{session_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_HOST}}/v1/tasks/{{task_id}}",
					"host": [
						"{{API_HOST}}"
					],
					"path": [
						"v1",
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Task",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let task_data = pm.environment.get(\"task_data\");\r",
							"let task = JSON.parse(task_data);\r",
							"task.completed = true;\r",
							"let updated_task_data = JSON.stringify(task);\r",
							"pm.environment.set(\"updated_task_data\", updated_task_data);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HTTP Status\r",
							"pm.test(\"Request returns 200 HTTP Status\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// HTTP Headers\r",
							"pm.test(\"Content-Type header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(header).to.eql(\"application/json;charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-Content-Type-Options header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-Content-Type-Options\");\r",
							"    pm.expect(header).to.eql(\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-Frame-Options header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-Frame-Options\");\r",
							"    pm.expect(header).to.eql(\"DENY\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-XSS-Protection header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-XSS-Protection\");\r",
							"    pm.expect(header).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"pm.test(\"Cache-Control header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Cache-Control\");\r",
							"    pm.expect(header).to.eql(\"no-store\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Security-Policy header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Content-Security-Policy\");\r",
							"    pm.expect(header).to.eql(\"default-src 'none'; frame-ancestors 'none'; sandbox\");\r",
							"});\r",
							"\r",
							"pm.test(\"Server header is empty\", function() {\r",
							"    header = pm.response.headers.get(\"Server\");\r",
							"    pm.expect(header).to.eql(\"\");\r",
							"});\r",
							"\r",
							"pm.test(\"Location header is set to updated task resource\", function() {\r",
							"    header = pm.response.headers.get(\"Location\");\r",
							"    task_id = pm.environment.get(\"task_id\");\r",
							"    pm.expect(header).to.eql(`/v1/tasks/${task_id}`);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{session_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{updated_task_data}}",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "{{API_HOST}}/v1/tasks/{{task_id}}",
					"host": [
						"{{API_HOST}}"
					],
					"path": [
						"v1",
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Updated Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HTTP Status\r",
							"pm.test(\"Request returns 200 HTTP Status\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// HTTP Headers\r",
							"pm.test(\"Content-Type header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(header).to.eql(\"application/json;charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-Content-Type-Options header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-Content-Type-Options\");\r",
							"    pm.expect(header).to.eql(\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-Frame-Options header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-Frame-Options\");\r",
							"    pm.expect(header).to.eql(\"DENY\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-XSS-Protection header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-XSS-Protection\");\r",
							"    pm.expect(header).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"pm.test(\"Cache-Control header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Cache-Control\");\r",
							"    pm.expect(header).to.eql(\"no-store\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Security-Policy header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Content-Security-Policy\");\r",
							"    pm.expect(header).to.eql(\"default-src 'none'; frame-ancestors 'none'; sandbox\");\r",
							"});\r",
							"\r",
							"pm.test(\"Server header is empty\", function() {\r",
							"    header = pm.response.headers.get(\"Server\");\r",
							"    pm.expect(header).to.eql(\"\");\r",
							"});\r",
							"\r",
							"// HTTP Response Body\r",
							"pm.test(\"Task completed\", function() {\r",
							"    task_id = pm.environment.get(\"task_id\");\r",
							"    task = pm.response.json();\r",
							"    pm.expect(task.id).to.eql(task_id);\r",
							"    pm.expect(task.subject).to.eql(\"phone bill\");\r",
							"    pm.expect(task.description).to.eql(\"ask for extension\");\r",
							"    pm.expect(task.completed).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{session_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_HOST}}/v1/tasks/{{task_id}}",
					"host": [
						"{{API_HOST}}"
					],
					"path": [
						"v1",
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Task",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HTTP Status",
							"pm.test(\"Request returns 204 HTTP Status\", function() {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"// HTTP Headers",
							"pm.test(\"Content-Type header is set\", function() {",
							"    header = pm.response.headers.get(\"Content-Type\");",
							"    pm.expect(header).to.eql(\"application/json;charset=utf-8\");",
							"});",
							"",
							"pm.test(\"X-Content-Type-Options header is set\", function() {",
							"    header = pm.response.headers.get(\"X-Content-Type-Options\");",
							"    pm.expect(header).to.eql(\"nosniff\");",
							"});",
							"",
							"pm.test(\"X-Frame-Options header is set\", function() {",
							"    header = pm.response.headers.get(\"X-Frame-Options\");",
							"    pm.expect(header).to.eql(\"DENY\");",
							"});",
							"",
							"pm.test(\"X-XSS-Protection header is set\", function() {",
							"    header = pm.response.headers.get(\"X-XSS-Protection\");",
							"    pm.expect(header).to.eql(\"0\");",
							"});",
							"",
							"pm.test(\"Cache-Control header is set\", function() {",
							"    header = pm.response.headers.get(\"Cache-Control\");",
							"    pm.expect(header).to.eql(\"no-store\");",
							"});",
							"",
							"pm.test(\"Content-Security-Policy header is set\", function() {",
							"    header = pm.response.headers.get(\"Content-Security-Policy\");",
							"    pm.expect(header).to.eql(\"default-src 'none'; frame-ancestors 'none'; sandbox\");",
							"});",
							"",
							"pm.test(\"Server header is empty\", function() {",
							"    header = pm.response.headers.get(\"Server\");",
							"    pm.expect(header).to.eql(\"\");",
							"});",
							"",
							"// HTTP Response Body",
							"pm.test(\"Response body is empty\", function() {",
							"    body = pm.response.text();",
							"    pm.expect(body).to.eql(\"\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{session_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{API_HOST}}/v1/tasks/{{task_id}}",
					"host": [
						"{{API_HOST}}"
					],
					"path": [
						"v1",
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Task Deletion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HTTP Status",
							"pm.test(\"Request returns 404 HTTP Status\", function() {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"// HTTP Headers",
							"pm.test(\"Content-Type header is set\", function() {",
							"    header = pm.response.headers.get(\"Content-Type\");",
							"    pm.expect(header).to.eql(\"application/json;charset=utf-8\");",
							"});",
							"",
							"pm.test(\"X-Content-Type-Options header is set\", function() {",
							"    header = pm.response.headers.get(\"X-Content-Type-Options\");",
							"    pm.expect(header).to.eql(\"nosniff\");",
							"});",
							"",
							"pm.test(\"X-Frame-Options header is set\", function() {",
							"    header = pm.response.headers.get(\"X-Frame-Options\");",
							"    pm.expect(header).to.eql(\"DENY\");",
							"});",
							"",
							"pm.test(\"X-XSS-Protection header is set\", function() {",
							"    header = pm.response.headers.get(\"X-XSS-Protection\");",
							"    pm.expect(header).to.eql(\"0\");",
							"});",
							"",
							"pm.test(\"Cache-Control header is set\", function() {",
							"    header = pm.response.headers.get(\"Cache-Control\");",
							"    pm.expect(header).to.eql(\"no-store\");",
							"});",
							"",
							"pm.test(\"Content-Security-Policy header is set\", function() {",
							"    header = pm.response.headers.get(\"Content-Security-Policy\");",
							"    pm.expect(header).to.eql(\"default-src 'none'; frame-ancestors 'none'; sandbox\");",
							"});",
							"",
							"pm.test(\"Server header is empty\", function() {",
							"    header = pm.response.headers.get(\"Server\");",
							"    pm.expect(header).to.eql(\"\");",
							"});",
							"",
							"// HTTP Response Body",
							"pm.test(\"Task cannot be found\", function() {",
							"    let error = pm.response.json();",
							"    pm.expect(error.code).to.eql(\"task_not_found\");",
							"    pm.expect(error.message).to.eql(\"Task could not be found.\")",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{session_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_HOST}}/v1/tasks/{{task_id}}",
					"host": [
						"{{API_HOST}}"
					],
					"path": [
						"v1",
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign out",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// HTTP Status\r",
							"pm.test(\"Request returns 204 HTTP Status\", function() {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"// HTTP Headers\r",
							"pm.test(\"Content-Type header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Content-Type\");\r",
							"    pm.expect(header).to.eql(\"application/json;charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-Content-Type-Options header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-Content-Type-Options\");\r",
							"    pm.expect(header).to.eql(\"nosniff\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-Frame-Options header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-Frame-Options\");\r",
							"    pm.expect(header).to.eql(\"DENY\");\r",
							"});\r",
							"\r",
							"pm.test(\"X-XSS-Protection header is set\", function() {\r",
							"    header = pm.response.headers.get(\"X-XSS-Protection\");\r",
							"    pm.expect(header).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"pm.test(\"Cache-Control header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Cache-Control\");\r",
							"    pm.expect(header).to.eql(\"no-store\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Security-Policy header is set\", function() {\r",
							"    header = pm.response.headers.get(\"Content-Security-Policy\");\r",
							"    pm.expect(header).to.eql(\"default-src 'none'; frame-ancestors 'none'; sandbox\");\r",
							"});\r",
							"\r",
							"pm.test(\"Server header is empty\", function() {\r",
							"    header = pm.response.headers.get(\"Server\");\r",
							"    pm.expect(header).to.eql(\"\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{session_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{API_HOST}}/v1/sessions",
					"host": [
						"{{API_HOST}}"
					],
					"path": [
						"v1",
						"sessions"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "API_HOST",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "USER_USERNAME",
			"value": "user",
			"type": "string"
		},
		{
			"key": "USER_PASSWORD",
			"value": "password",
			"type": "string"
		}
	]
}
